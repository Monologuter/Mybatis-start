<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.educy.dao.UserMapper">
    <select id="getUserList" resultType="User">
    select  * from user;
  </select>

    <select id="getUserById" parameterType="int" resultType="User" >
    select * from user where id= #{id}
    </select>

    
    <insert id="addUser" parameterType="User">
        insert into user ( username , birthday, sex,address) values (#{username},#{birthday} ,#{sex} , #{address})
    </insert>
    
    <update id="updateUser" parameterType="User">
        update user set username=#{username} , sex=#{sex}  , address=#{address} where id = #{id};
    </update>

    <delete id="deleteUser" parameterType="int">
        delete from  user where id = #{id};

    </delete>

<!--    使用map集合的好处可以自定义操作 要是使用id = addUser那样的话插入一个字段的时候需要在实体类中创建一个构造方法  要是插入两个字段的时候-->
<!--    又要创建含有两个字段的构造方法  所以是很繁琐的-->
    <insert id="addUser2" parameterType="map">
        insert into user ( username , sex) values (#{username} ,#{sex})
    </insert>

    <update id = "updateUser2"  parameterType="map">
        update user set username=#{username} ,birthday=#{birthday}, sex=#{sex} ,address=#{address} where id = #{id};

    </update>


    <select id="getUserLike" parameterType="list" resultType="User">
    <!--  select * from user where  username like #{value}
下面防止sql注入  如果是上面的where id = ？  如果是正常的情况的话用户传入id=1就可以正常查询
但是用户要是传入一个奇怪的字符串的话id = 1 or 1=1的话查询出来的就是所有的用户
所以防止sql注入就像下面一样直接给他写死就好了-->

        select * from user where  username like "%"#{value}"%"
    </select>

</mapper>











